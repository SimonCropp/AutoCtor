using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace AutoCtor;

[Generator]
public class AutoConstructSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new AutoConstructSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var receiver = (AutoConstructSyntaxReceiver)context.SyntaxContextReceiver;

        foreach (var type in receiver.ClassesToAutoConstruct)
        {
            var ns = type.ContainingNamespace.IsGlobalNamespace
                ? null
                : type.ContainingNamespace.ToString();

            var fields = type.GetMembers()
                .OfType<IFieldSymbol>()
                .Where(f => f.IsReadOnly);

            var parameters = fields.Select(f => $"{f.Type.ToDisplayString()} g_{f.Name}");

            var assignments = fields.Select(f => $"            {f.Name} = g_{f.Name};");

            var source = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/distantcam/AutoCtor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{(ns is null ? null : $@"namespace {ns}
{{")}
    partial class {type.Name}
    {{
        public {type.Name}({string.Join(", ", parameters)})
        {{
{string.Join(Environment.NewLine, assignments)}
        }}
    }}
{(ns is null ? null : @"}
")}";

            var typeNamespace = type.ContainingNamespace.IsGlobalNamespace
                ? null
                : $"{type.ContainingNamespace}.";

            context.AddSource($"{typeNamespace}{type.Name}.g.cs", SourceText.From(source, Encoding.UTF8));
        }
    }
}

public class AutoConstructSyntaxReceiver : ISyntaxContextReceiver
{
    public List<INamedTypeSymbol> ClassesToAutoConstruct { get; } = new();

    public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
    {
        if (context.Node is ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax)
        {
            var classSymbol = context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax);
            var attributeData = classSymbol?.GetAttributes().SingleOrDefault(x =>
                (x.AttributeClass.Name == "AutoConstruct" || x.AttributeClass.Name == "AutoConstructAttribute") &&
                (x.AttributeClass.ContainingNamespace.IsGlobalNamespace || x.AttributeClass.ContainingNamespace.ToDisplayString() == "AutoCtor")
            );

            if (classSymbol is not null && attributeData is not null)
            {
                ClassesToAutoConstruct.Add((INamedTypeSymbol)classSymbol);
            }
        }
    }
}
